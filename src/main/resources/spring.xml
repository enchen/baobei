<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	
<!-- 	载入变量信息 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
<property name="location">
<value>classpath:jdbc.properties</value>
</property>
</bean>
	<!-- HIBERNATE配置 -->
<!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->

 <bean name="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
        <property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="1" />
		<property name="maxActive" value="2" />
		<property name="minIdle" value="1" />
		<property name="maxWait" value="6000" />
		<property name="validationQuery" value="select 1;" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="stat" />
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.ProgressDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="current_session_context_class">thread</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>cn.beans</value>
			</list>
		</property>
	</bean>
	<!-- JDBC配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property> 
	</bean>
	
	
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 事务配置 -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>	
<!-- <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  -->
<!-- 		<property name="dataSource" ref="dataSource" />  -->
<!-- 	</bean>  -->
	<!-- 
	 -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="txManager"> -->
<!-- 		<tx:attributes > -->
<!-- 			 <tx:method name="*" read-only="true" propagation="REQUIRED" /> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
<!-- 	 <aop:config> -->
<!-- 	 	<aop:pointcut expression="execution(* com.ssh.server.*.*(..))" id="point"/> -->
<!-- 	 	<aop:advisor advice-ref="txAdvice" pointcut-ref="point"/> -->
<!-- 	 </aop:config> -->
<!-- <aop:config proxy-target-class="true">  -->
<!-- 		<aop:advisor advice-ref="txAdvice" pointcut="execution(* net.noday..service..*.*(..))" />  -->
<!-- 	</aop:config> -->
	 	 <aop:config>
	 	<aop:aspect id="myAspect" ref="abean">
	 	<aop:pointcut expression="execution(* cn.aop.test1..(..))" id="testpointcut"/>
	 	</aop:aspect>
	 	
	 </aop:config>
	 <bean id="abean" class="cn.aop.test1"></bean>
	<!-- 注解配置 -->
	<context:component-scan base-package="cn.action"></context:component-scan>
	<context:component-scan base-package="cn.dao" />
	<!-- 	方便使用DAO -->
	 <bean id="dbservice" class="cn.services.DbService" ></bean>
	 <bean name="springcontextbean" class="cn.util.SpringContext"></bean>
</beans>